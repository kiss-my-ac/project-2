import React from 'react';

interface NetworkDiagramProps {
  currentStep: string;
  fixesApplied: string[];
}

const NetworkDiagram: React.FC<NetworkDiagramProps> = ({ currentStep, fixesApplied }) => {
  const isDNSFixed = fixesApplied.includes('dns-server-fix') || fixesApplied.includes('hosts-file-fix');
  const isFirewallFixed = fixesApplied.includes('firewall-fix');
  const isServiceFixed = fixesApplied.includes('service-restart');
  
  return (
    <div className="h-96 bg-slate-800 rounded-md p-4">
      <svg width="100%" height="100%" viewBox="0 0 800 400">
        {/* Client */}
        <g>
          <rect x="50" y="180" width="120" height="60" rx="5" fill="#2D3748" stroke="#4A5568" strokeWidth="2" />
          <text x="110" y="215" textAnchor="middle" fill="#E2E8F0" fontFamily="monospace">Client</text>
        </g>
        
        {/* DNS Server */}
        <g>
          <rect 
            x="280" 
            y="80" 
            width="120" 
            height="60" 
            rx="5" 
            fill={isDNSFixed ? "#2F855A" : "#822727"} 
            stroke={isDNSFixed ? "#38A169" : "#E53E3E"} 
            strokeWidth="2" 
          />
          <text x="340" y="115" textAnchor="middle" fill="#E2E8F0" fontFamily="monospace">DNS Server</text>
        </g>
        
        {/* Firewall */}
        <g>
          <rect 
            x="280" 
            y="280" 
            width="120" 
            height="60" 
            rx="5" 
            fill={isFirewallFixed ? "#2F855A" : "#822727"} 
            stroke={isFirewallFixed ? "#38A169" : "#E53E3E"} 
            strokeWidth="2" 
          />
          <text x="340" y="315" textAnchor="middle" fill="#E2E8F0" fontFamily="monospace">Firewall</text>
        </g>
        
        {/* Web Server */}
        <g>
          <rect 
            x="550" 
            y="180" 
            width="120" 
            height="60" 
            rx="5" 
            fill={isServiceFixed ? "#2F855A" : "#822727"} 
            stroke={isServiceFixed ? "#38A169" : "#E53E3E"} 
            strokeWidth="2" 
          />
          <text x="610" y="215" textAnchor="middle" fill="#E2E8F0" fontFamily="monospace">Web Server</text>
        </g>
        
        {/* Connection lines */}
        <line 
          x1="170" 
          y1="210" 
          x2="280" 
          y2="110" 
          stroke={isDNSFixed ? "#38A169" : "#4A5568"} 
          strokeWidth="2" 
          strokeDasharray={isDNSFixed ? "0" : "5,5"} 
        />
        <text x="225" y="150" textAnchor="middle" fill={isDNSFixed ? "#38A169" : "#E53E3E"} fontFamily="monospace">DNS Query</text>
        
        <line 
          x1="170" 
          y1="210" 
          x2="280" 
          y2="310" 
          stroke={isFirewallFixed ? "#38A169" : "#4A5568"} 
          strokeWidth="2" 
          strokeDasharray={isFirewallFixed ? "0" : "5,5"} 
        />
        <text x="225" y="270" textAnchor="middle" fill={isFirewallFixed ? "#38A169" : "#E53E3E"} fontFamily="monospace">Network Path</text>
        
        <line 
          x1="400" 
          y1="310" 
          x2="550" 
          y2="210" 
          stroke={isServiceFixed ? "#38A169" : "#4A5568"} 
          strokeWidth="2" 
          strokeDasharray={isServiceFixed ? "0" : "5,5"} 
        />
        <text x="475" y="270" textAnchor="middle" fill={isServiceFixed ? "#38A169" : "#E53E3E"} fontFamily="monospace">Service Connection</text>
      </svg>
      
      <div className="mt-2 text-center text-sm text-gray-400">
        {isDNSFixed && isFirewallFixed && isServiceFixed ? (
          <span className="text-green-400">✓ All issues resolved - Service is now accessible</span>
        ) : (
          <span className="text-yellow-400">Issues detected in the connection path</span>
        )}
      </div>
    </div>
  );
};

export default NetworkDiagram;
	
	import React from 'react';

interface NetworkDiagramProps {
  currentStep: string;
  fixesApplied: string[];
}

const NetworkDiagram: React.FC<NetworkDiagramProps> = ({ currentStep, fixesApplied }) => {
  const isDNSFixed = fixesApplied.includes('dns-server-fix') || fixesApplied.includes('hosts-file-fix');
  const isFirewallFixed = fixesApplied.includes('firewall-fix');
  const isServiceFixed = fixesApplied.includes('service-restart');
  
  return (
    <div className="h-96 bg-slate-800 rounded-md p-4">
      <svg width="100%" height="100%" viewBox="0 0 800 400">
        {/* Client */}
        <g>
          <rect x="50" y="180" width="120" height="60" rx="5" fill="#2D3748" stroke="#4A5568" strokeWidth="2" />
          <text x="110" y="215" textAnchor="middle" fill="#E2E8F0" fontFamily="monospace">Client</text>
        </g>
        
        {/* DNS Server */}
        <g>
          <rect 
            x="280" 
            y="80" 
            width="120" 
            height="60" 
            rx="5" 
            fill={isDNSFixed ? "#2F855A" : "#822727"} 
            stroke={isDNSFixed ? "#38A169" : "#E53E3E"} 
            strokeWidth="2" 
          />
          <text x="340" y="115" textAnchor="middle" fill="#E2E8F0" fontFamily="monospace">DNS Server</text>
        </g>
        
        {/* Firewall */}
        <g>
          <rect 
            x="280" 
            y="280" 
            width="120" 
            height="60" 
            rx="5" 
            fill={isFirewallFixed ? "#2F855A" : "#822727"} 
            stroke={isFirewallFixed ? "#38A169" : "#E53E3E"} 
            strokeWidth="2" 
          />
          <text x="340" y="315" textAnchor="middle" fill="#E2E8F0" fontFamily="monospace">Firewall</text>
        </g>
        
        {/* Web Server */}
        <g>
          <rect 
            x="550" 
            y="180" 
            width="120" 
            height="60" 
            rx="5" 
            fill={isServiceFixed ? "#2F855A" : "#822727"} 
            stroke={isServiceFixed ? "#38A169" : "#E53E3E"} 
            strokeWidth="2" 
          />
          <text x="610" y="215" textAnchor="middle" fill="#E2E8F0" fontFamily="monospace">Web Server</text>
        </g>
        
        {/* Connection lines */}
        <line 
          x1="170" 
          y1="210" 
          x2="280" 
          y2="110" 
          stroke={isDNSFixed ? "#38A169" : "#4A5568"} 
          strokeWidth="2" 
          strokeDasharray={isDNSFixed ? "0" : "5,5"} 
        />
        <text x="225" y="150" textAnchor="middle" fill={isDNSFixed ? "#38A169" : "#E53E3E"} fontFamily="monospace">DNS Query</text>
        
        <line 
          x1="170" 
          y1="210" 
          x2="280" 
          y2="310" 
          stroke={isFirewallFixed ? "#38A169" : "#4A5568"} 
          strokeWidth="2" 
          strokeDasharray={isFirewallFixed ? "0" : "5,5"} 
        />
        <text x="225" y="270" textAnchor="middle" fill={isFirewallFixed ? "#38A169" : "#E53E3E"} fontFamily="monospace">Network Path</text>
        
        <line 
          x1="400" 
          y1="310" 
          x2="550" 
          y2="210" 
          stroke={isServiceFixed ? "#38A169" : "#4A5568"} 
          strokeWidth="2" 
          strokeDasharray={isServiceFixed ? "0" : "5,5"} 
        />
        <text x="475" y="270" textAnchor="middle" fill={isServiceFixed ? "#38A169" : "#E53E3E"} fontFamily="monospace">Service Connection</text>
      </svg>
      
      <div className="mt-2 text-center text-sm text-gray-400">
        {isDNSFixed && isFirewallFixed && isServiceFixed ? (
          <span className="text-green-400">✓ All issues resolved - Service is now accessible</span>
        ) : (
          <span className="text-yellow-400">Issues detected in the connection path</span>
        )}
      </div>
    </div>
  );
};

export default NetworkDiagram;
	import React, { useState, useRef, useEffect } from 'react';
import { commandResults } from '@/data/commandResults';

interface TerminalProps {
  addToHistory: (command: string, result: string) => void;
  commandHistory: string[];
  currentStep: string;
}

const Terminal: React.FC<TerminalProps> = ({ addToHistory, commandHistory, currentStep }) => {
  const [input, setInput] = useState<string>('');
  const [history, setHistory] = useState<{command: string, output: string}[]>([]);
  const terminalRef = useRef<HTMLDivElement>(null);
  
  useEffect(() => {
    if (terminalRef.current) {
      terminalRef.current.scrollTop = terminalRef.current.scrollHeight;
    }
  }, [history]);
  
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!input.trim()) return;
    
    const command = input.trim();
    let output = "Command not recognized. Try 'help' for a list of available commands.";
    
    // Check if we have a predefined result for this command
    const resultKey = Object.keys(commandResults).find(key => 
      command.startsWith(key) || command === key
    );
    
    if (resultKey) {
      output = commandResults[resultKey];
      addToHistory(command, output);
    } else if (command === 'help') {
      output = `Available commands:
- dig internal.example.com
- dig @8.8.8.8 internal.example.com
- nslookup internal.example.com
- ping internal.example.com
- curl -v internal.example.com
- telnet internal.example.com 80
- telnet internal.example.com 443
- cat /etc/resolv.conf
- cat /etc/hosts
- ss -tuln
- netstat -tuln
- traceroute internal.example.com
- systemctl status named
- systemctl status nginx`;
    } else if (command === 'clear') {
      setHistory([]);
      setInput('');
      return;
    }
    
    setHistory(prevHistory => [...prevHistory, { command, output }]);
    setInput('');
  };
  
  return (
    <div className="flex flex-col h-96 bg-gray-900 rounded-md overflow-hidden border border-gray-700">
      <div 
        ref={terminalRef}
        className="flex-1 p-4 font-mono text-sm overflow-y-auto"
      >
        {/* Initial greeting */}
        <div className="text-green-400 mb-2">Welcome to the Troubleshooting Terminal.</div>
        <div className="text-gray-400 mb-4">Type 'help' to see available commands.</div>
        
        {/* Command history */}
        {history.map((item, index) => (
          <div key={index} className="mb-2">
            <div className="flex">
              <span className="text-green-400 mr-2">user@server:~$</span>
              <span className="text-white">{item.command}</span>
            </div>
            <div className="pl-4 text-gray-300 whitespace-pre-line">{item.output}</div>
          </div>
        ))}
      </div>
      
      {/* Command input */}
      <form onSubmit={handleSubmit} className="flex border-t border-gray-700">
        <div className="bg-gray-800 text-green-400 px-2 py-1">user@server:~$</div>
        <input 
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          className="flex-1 bg-gray-800 text-white px-2 py-1 focus:outline-none"
          autoFocus
        />
      </form>
    </div>
  );
};

export default Terminal;
	import React from 'react';
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { CheckCircle2, Circle, AlertCircle } from "lucide-react";

interface TroubleshootingStepsProps {
  currentStep: string;
  setCurrentStep: (step: string) => void;
  commandHistory: string[];
  fixesApplied: string[];
  applyFix: (fix: string) => void;
}

const TroubleshootingSteps: React.FC<TroubleshootingStepsProps> = ({ 
  currentStep, 
  setCurrentStep, 
  commandHistory,
  fixesApplied,
  applyFix
}) => {
  const steps = [
    {
      id: 'dns-check',
      title: 'Verify DNS Resolution',
      description: 'Compare resolution from /etc/resolv.conf DNS vs. 8.8.8.8',
      commands: ['dig internal.example.com', 'dig @8.8.8.8 internal.example.com', 'cat /etc/resolv.conf'],
      fixId: 'dns-server-fix',
      fixDescription: 'Update DNS server settings',
      fixCommand: 'echo "nameserver 8.8.8.8" > /etc/resolv.conf'
    },
    {
      id: 'hosts-file',
      title: 'Check Hosts File',
      description: 'Configure a local /etc/hosts entry to bypass DNS',
      commands: ['cat /etc/hosts'],
      fixId: 'hosts-file-fix',
      fixDescription: 'Add entry to hosts file',
      fixCommand: 'echo "192.168.1.100 internal.example.com" >> /etc/hosts'
    },
    {
      id: 'reachability',
      title: 'Diagnose Service Reachability',
      description: 'Check if web service ports are accessible',
      commands: ['curl -v internal.example.com', 'telnet internal.example.com 80', 'telnet internal.example.com 443'],
      fixId: 'firewall-fix',
      fixDescription: 'Open firewall ports',
      fixCommand: 'firewall-cmd --permanent --add-port=80/tcp --add-port=443/tcp && firewall-cmd --reload'
    },
    {
      id: 'service-status',
      title: 'Check Service Status',
      description: 'Verify if the web service is running',
      commands: ['systemctl status nginx', 'ss -tuln', 'netstat -tuln'],
      fixId: 'service-restart',
      fixDescription: 'Restart web service',
      fixCommand: 'systemctl restart nginx'
    },
    {
      id: 'persistence',
      title: 'Persist Changes',
      description: 'Make DNS changes permanent',
      commands: [],
      fixId: 'persistent-dns',
      fixDescription: 'Configure systemd-resolved',
      fixCommand: 'echo -e "[Resolve]\\nDNS=8.8.8.8 1.1.1.1" > /etc/systemd/resolved.conf && systemctl restart systemd-resolved'
    }
  ];
  
  const hasRunAllCommands = (step: any) => {
    return step.commands.every(cmd => commandHistory.some(history => history.startsWith(cmd)));
  };
  
  const hasAppliedFix = (fixId: string) => {
    return fixesApplied.includes(fixId);
  };
  
  const getStepStatus = (step: any) => {
    if (hasAppliedFix(step.fixId)) {
      return "complete";
    }
    if (hasRunAllCommands(step)) {
      return "ready";
    }
    return "pending";
  };
  
  return (
    <div className="space-y-4">
      {steps.map((step) => {
        const status = getStepStatus(step);
        
        return (
          <div 
            key={step.id}
            className={`p-4 rounded-lg border ${
              currentStep === step.id 
                ? 'border-blue-500 bg-blue-900/20' 
                : 'border-gray-700 bg-gray-800/50'
            }`}
          >
            <div className="flex items-start gap-2">
              {status === "complete" ? (
                <CheckCircle2 className="h-5 w-5 text-green-500 mt-1" />
              ) : status === "ready" ? (
                <AlertCircle className="h-5 w-5 text-yellow-500 mt-1" />
              ) : (
                <Circle className="h-5 w-5 text-gray-500 mt-1" />
              )}
              
              <div className="flex-1">
                <h3 className="font-medium text-gray-200 flex items-center gap-2">
                  {step.title}
                  {status === "complete" && <Badge variant="outline" className="border-green-500 text-green-500">Fixed</Badge>}
                </h3>
                <p className="text-gray-400 text-sm mb-2">{step.description}</p>
                
                {step.commands.length > 0 && (
                  <div className="text-xs bg-gray-900/60 p-2 rounded mb-2">
                    <div className="text-gray-400 mb-1">Suggested commands:</div>
                    <div className="font-mono text-green-400">
                      {step.commands.join(' | ')}
                    </div>
                  </div>
                )}
                
                {status === "ready" && !hasAppliedFix(step.fixId) && (
                  <div className="mt-2">
                    <div className="text-xs text-gray-400 mb-1">Apply fix:</div>
                    <div className="font-mono text-xs bg-gray-900/60 p-2 rounded mb-2">{step.fixCommand}</div>
                    <Button 
                      size="sm" 
                      variant="default" 
                      onClick={() => applyFix(step.fixId)}
                      className="w-full mt-1"
                    >
                      Apply Fix
                    </Button>
                  </div>
                )}
                
                <div className="flex justify-end mt-2">
                  <Button 
                    size="sm" 
                    variant="ghost" 
                    onClick={() => setCurrentStep(step.id)}
                    className={currentStep === step.id ? "bg-blue-900/50" : ""}
                  >
                    {currentStep === step.id ? "Current" : "Focus"}
                  </Button>
                </div>
              </div>
            </div>
          </div>
        );
      })}
    </div>
  );
};

export default TroubleshootingSteps;
	import React from 'react';
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { CheckCircle2, Circle, AlertCircle } from "lucide-react";

interface TroubleshootingStepsProps {
  currentStep: string;
  setCurrentStep: (step: string) => void;
  commandHistory: string[];
  fixesApplied: string[];
  applyFix: (fix: string) => void;
}

const TroubleshootingSteps: React.FC<TroubleshootingStepsProps> = ({ 
  currentStep, 
  setCurrentStep, 
  commandHistory,
  fixesApplied,
  applyFix
}) => {
  const steps = [
    {
      id: 'dns-check',
      title: 'Verify DNS Resolution',
      description: 'Compare resolution from /etc/resolv.conf DNS vs. 8.8.8.8',
      commands: ['dig internal.example.com', 'dig @8.8.8.8 internal.example.com', 'cat /etc/resolv.conf'],
      fixId: 'dns-server-fix',
      fixDescription: 'Update DNS server settings',
      fixCommand: 'echo "nameserver 8.8.8.8" > /etc/resolv.conf'
    },
    {
      id: 'hosts-file',
      title: 'Check Hosts File',
      description: 'Configure a local /etc/hosts entry to bypass DNS',
      commands: ['cat /etc/hosts'],
      fixId: 'hosts-file-fix',
      fixDescription: 'Add entry to hosts file',
      fixCommand: 'echo "192.168.1.100 internal.example.com" >> /etc/hosts'
    },
    {
      id: 'reachability',
      title: 'Diagnose Service Reachability',
      description: 'Check if web service ports are accessible',
      commands: ['curl -v internal.example.com', 'telnet internal.example.com 80', 'telnet internal.example.com 443'],
      fixId: 'firewall-fix',
      fixDescription: 'Open firewall ports',
      fixCommand: 'firewall-cmd --permanent --add-port=80/tcp --add-port=443/tcp && firewall-cmd --reload'
    },
    {
      id: 'service-status',
      title: 'Check Service Status',
      description: 'Verify if the web service is running',
      commands: ['systemctl status nginx', 'ss -tuln', 'netstat -tuln'],
      fixId: 'service-restart',
      fixDescription: 'Restart web service',
      fixCommand: 'systemctl restart nginx'
    },
    {
      id: 'persistence',
      title: 'Persist Changes',
      description: 'Make DNS changes permanent',
      commands: [],
      fixId: 'persistent-dns',
      fixDescription: 'Configure systemd-resolved',
      fixCommand: 'echo -e "[Resolve]\\nDNS=8.8.8.8 1.1.1.1" > /etc/systemd/resolved.conf && systemctl restart systemd-resolved'
    }
  ];
  
  const hasRunAllCommands = (step: any) => {
    return step.commands.every(cmd => commandHistory.some(history => history.startsWith(cmd)));
  };
  
  const hasAppliedFix = (fixId: string) => {
    return fixesApplied.includes(fixId);
  };
  
  const getStepStatus = (step: any) => {
    if (hasAppliedFix(step.fixId)) {
      return "complete";
    }
    if (hasRunAllCommands(step)) {
      return "ready";
    }
    return "pending";
  };
  
  return (
    <div className="space-y-4">
      {steps.map((step) => {
        const status = getStepStatus(step);
        
        return (
          <div 
            key={step.id}
            className={`p-4 rounded-lg border ${
              currentStep === step.id 
                ? 'border-blue-500 bg-blue-900/20' 
                : 'border-gray-700 bg-gray-800/50'
            }`}
          >
            <div className="flex items-start gap-2">
              {status === "complete" ? (
                <CheckCircle2 className="h-5 w-5 text-green-500 mt-1" />
              ) : status === "ready" ? (
                <AlertCircle className="h-5 w-5 text-yellow-500 mt-1" />
              ) : (
                <Circle className="h-5 w-5 text-gray-500 mt-1" />
              )}
              
              <div className="flex-1">
                <h3 className="font-medium text-gray-200 flex items-center gap-2">
                  {step.title}
                  {status === "complete" && <Badge variant="outline" className="border-green-500 text-green-500">Fixed</Badge>}
                </h3>
                <p className="text-gray-400 text-sm mb-2">{step.description}</p>
                
                {step.commands.length > 0 && (
                  <div className="text-xs bg-gray-900/60 p-2 rounded mb-2">
                    <div className="text-gray-400 mb-1">Suggested commands:</div>
                    <div className="font-mono text-green-400">
                      {step.commands.join(' | ')}
                    </div>
                  </div>
                )}
                
                {status === "ready" && !hasAppliedFix(step.fixId) && (
                  <div className="mt-2">
                    <div className="text-xs text-gray-400 mb-1">Apply fix:</div>
                    <div className="font-mono text-xs bg-gray-900/60 p-2 rounded mb-2">{step.fixCommand}</div>
                    <Button 
                      size="sm" 
                      variant="default" 
                      onClick={() => applyFix(step.fixId)}
                      className="w-full mt-1"
                    >
                      Apply Fix
                    </Button>
                  </div>
                )}
                
                <div className="flex justify-end mt-2">
                  <Button 
                    size="sm" 
                    variant="ghost" 
                    onClick={() => setCurrentStep(step.id)}
                    className={currentStep === step.id ? "bg-blue-900/50" : ""}
                  >
                    {currentStep === step.id ? "Current" : "Focus"}
                  </Button>
                </div>
              </div>
            </div>
          </div>
        );
      })}
    </div>
  );
};

export default TroubleshootingSteps;
	
import { useState } from 'react';
import Terminal from '@/components/Terminal';
import NetworkDiagram from '@/components/NetworkDiagram';
import TroubleshootingSteps from '@/components/TroubleshootingSteps';
import ResultsPanel from '@/components/ResultsPanel';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";

const Index = () => {
  const [currentStep, setCurrentStep] = useState<string>('dns-check');
  const [commandHistory, setCommandHistory] = useState<string[]>([]);
  const [commandResults, setCommandResults] = useState<{[key: string]: string}>({});
  const [fixesApplied, setFixesApplied] = useState<string[]>([]);
  
  const addToHistory = (command: string, result: string) => {
    setCommandHistory(prev => [...prev, command]);
    setCommandResults(prev => ({...prev, [command]: result}));
  };
  
  const applyFix = (fix: string) => {
    setFixesApplied(prev => [...prev, fix]);
  };
  
  return (
    <div className="min-h-screen bg-slate-900 text-gray-100 p-4">
      <header className="mb-6">
        <h1 className="text-3xl font-bold text-green-400">Internal Service Rescue Mission</h1>
        <p className="text-gray-400">Troubleshoot and restore connectivity to internal.example.com</p>
      </header>
      
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2">
          <Tabs defaultValue="terminal" className="w-full">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="terminal">Terminal</TabsTrigger>
              <TabsTrigger value="network">Network Diagram</TabsTrigger>
              <TabsTrigger value="results">Results</TabsTrigger>
            </TabsList>
            <TabsContent value="terminal">
              <Card>
                <CardHeader>
                  <CardTitle>Command Terminal</CardTitle>
                  <CardDescription>Run diagnostic commands to troubleshoot the issue</CardDescription>
                </CardHeader>
                <CardContent>
                  <Terminal 
                    addToHistory={addToHistory} 
                    commandHistory={commandHistory}
                    currentStep={currentStep}
                  />
                </CardContent>
              </Card>
            </TabsContent>
            
            <TabsContent value="network">
              <Card>
                <CardHeader>
                  <CardTitle>Network Topology</CardTitle>
                  <CardDescription>Visual representation of the network</CardDescription>
                </CardHeader>
                <CardContent>
                  <NetworkDiagram 
                    currentStep={currentStep} 
                    fixesApplied={fixesApplied}
                  />
                </CardContent>
              </Card>
            </TabsContent>
            
            <TabsContent value="results">
              <Card>
                <CardHeader>
                  <CardTitle>Diagnostic Results</CardTitle>
                  <CardDescription>Analysis of your findings</CardDescription>
                </CardHeader>
                <CardContent>
                  <ResultsPanel 
                    commandResults={commandResults}
                    fixesApplied={fixesApplied}
                  />
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
        
        <div className="lg:col-span-1">
          <Card className="h-full">
            <CardHeader>
              <CardTitle>Troubleshooting Steps</CardTitle>
              <CardDescription>Step-by-step guide to resolve the issue</CardDescription>
            </CardHeader>
            <CardContent>
              <TroubleshootingSteps 
                currentStep={currentStep}
                setCurrentStep={setCurrentStep}
                commandHistory={commandHistory}
                fixesApplied={fixesApplied}
                applyFix={applyFix}
              />
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default Index;
